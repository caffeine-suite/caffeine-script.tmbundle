##
  Reference:
  https://macromates.com/manual/en/language_grammars#language_grammars

name:           :CaffeineScript
comment:        :CaffeineScript
fileTypes:      :caf :caffeine
scopeName:      :source.caffeine
uuid:           :62083bf8-bc2f-46ed-847a-86fd9639c25b

firstLineMatch: "" ^#!/.*\bcaf\b

patterns:
  []
    {}
      comment:  "" match stuff like: a -> â€¦
      captures:
        1: name: :punctuation.definition.parameters.begin.caffeine
        2:
          patterns:
            []
              {}
                captures:
                  1: name: :variable.parameter.function.caffeine
                  2: name: :punctuation.separator.key-value.caffeine
                  3: name: :string.quoted.double.caffeine
                  4: name: :punctuation.definition.string.begin.caffeine
                  5: name: :punctuation.definition.string.end.caffeine
                  6: name: :string.quoted.single.caffeine
                  7: name: :punctuation.definition.string.begin.caffeine
                  8: name: :punctuation.definition.string.end.caffeine

                match:
                  """
                    (?x)
                    ([^()\\s,]+)
                    \\s+(=)\\s+
                    (?:
                      ((")[^"]*("))
                      | ((')[^']*('))
                    )

              {} match: "[^()\\s,]+", name: :variable.parameter.function.caffeine
              {} match: ",",          name: :punctuation.separator.arguments.caffeine

        3: name: :punctuation.definition.parameters.begin.caffeine
        4: name: :storage.type.function.caffeine

      match:   "(\\()([^()]*?)(\\))\\s*([=-]>)"
      name:    :meta.inline.function.caffeine

    {}
      match: "" (new)\\s+(((class)(\\s+(\\w+(?:\\.\\w*)*))?)|(\\w+(?:\\.\\w*)*))
      captures:
        1: name: :keyword.operator.new.caffeine
        4: name: :storage.type.class.caffeine
        6: name: :entity.name.type.instance.caffeine
        7: name: :entity.name.type.instance.caffeine

      name:  :meta.class.instance.constructor

    {}
      begin:         "'''"
      beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
      end:           "'''"
      endCaptures:   0: name: :punctuation.definition.string.end.caffeine
      name:          :string.unquoted.heredoc.caffeine

    {}
      begin:         '"""'
      beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
      end:           '"""'
      endCaptures:   0: name: :punctuation.definition.string.end.caffeine
      name:          :string.quoted.double.heredoc.caffeine
      patterns:
        []
          {}
            match: "" \\.
            name:  :constant.character.escape.caffeine

          {} include: :#interpolated_caffeine

    {}
      begin: "(?=`)"
      end:   "(?<=`)"
      name:  :meta.embedded.line.caffeine
      patterns:
        []
          begin:         :`
          beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
          contentName:   :source.js
          end:           "(`)"
          endCaptures:
            0: name: :punctuation.definition.string.end.caffeine
            1: name: :source.js

          name:     :string.other.embedded.javascript.caffeine
          patterns: [] include: :source.js

    {}
      begin:    "(?<!#)###(?!#)"
      captures: 0:        name:                     :punctuation.definition.comment.caffeine
      end:      "###(?:[ \  ]*\\n)"
      name:     :comment.block.caffeine
      patterns: [] match: "(?<=^|\\s)@\\w*(?=\\s)", name: :storage.type.annotation.caffeinescript

    {}
      begin:         "(^[ \  ]+)?(?=#)"
      beginCaptures: 1: name: :punctuation.whitespace.comment.leading.caffeine
      end:           "(?!\\G)"
      patterns:
        []
          begin:         :#
          beginCaptures: 0: name: :punctuation.definition.comment.caffeine
          end:           "" \n
          name:          :comment.line.number-sign.caffeine

    {}
      begin:         "/{3}"
      beginCaptures: 0:          name: :punctuation.definition.string.begin.caffeine
      end:           "(/{3})[imgy]{0,4}"
      endCaptures:   1:          name: :punctuation.definition.string.end.caffeine
      name:          :string.regexp.block.caffeine
      patterns:      [] include: :source.js.regexp

    {}
      begin:         "/(?![\\s=/*+{}?])"
      beginCaptures: 0:          name: :punctuation.definition.string.begin.caffeine
      end:           "(/)[igmy]{0,4}(?![a-zA-Z0-9])"
      endCaptures:   1:          name: :punctuation.definition.string.end.caffeine
      name:          :string.regexp.caffeine
      patterns:      [] include: :source.js.regexp

    {}
      match:
        """
          (?x)
          \\b
          (?<![\\.\\$])
          (
            ((in|from)-)?(array|object)
            | as
            | await
            | break
            | by
            | case
            | catch
            | class
            | do
            | each
            | else
            | extends
            | extract
            | find
            | from
            | if
            | import
            | in
            | inject
            | into
            | reduce
            | return
            | returning
            | switch
            | then
            | throw
            | til
            | to
            | try
            | unless
            | until
            | when
            | while
            | with
            | with-key
            )
          )
          (?!\\s*:)
          \\b


      name: :keyword.control.caffeine

    {}
      match:
        """
          (?x)
          (and|or|<<|>>>?|(?<!\\()\\/|[=!<>*%+\\-&^])?=(?!>)
          | [!%^*\\/~?:]
          | \\-?\\-(?!>)
          | \\+\\+?
          | <>
          | <
          | >
          | &&?
          | \\.\\.\\.?
          | \\|\\|?
          | \\b(?<![\\.\\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)(?!\\s*:)\\b


      name: :keyword.operator.caffeine

    {}
      match:
        """
          (?x)
          \\b
          (?<![\\.\\$])
          (
            case
            | default
            | function
            | var
            | void
            | with
            | const
            | let
            | enum
            | export
            | import
            | native
            | __hasProp
            | __extends
            | __slice
            | __bind
            | __indexOf
            | implements
            | interface
            | package
            | private
            | protected
            | public
            | static
            | yield
          )
          (?!\\s*:)
          \\b


      name: :keyword.other.reserved.caffeine

    {}
      captures:
        1: name: :variable.other.assignment.caffeine
        4: name: :punctuation.separator.key-value
        5: name: :keyword.operator.caffeine

      match:
        """
          (?x)
          (?:
            ([a-zA-Z\\$_](\\w|\\$|\\.)*)
            \\s*
            (?!\\::)
            ((:)|((?:or|and|[-+/&%*?])?=)(?![>=]))
            (?!
              (
                \\s*\\(.*\\)
              )?
              \\s*
              ([=-]>)
            )
          )

    {}
      begin:         "(?<=\\s|^)(\\{)(?=.+?\\}\\s+[:=])"
      beginCaptures: 0: name: :keyword.operator.caffeine
      end:           "(\\}\\s*[:=])"
      endCaptures:   0: name: :keyword.operator.caffeine
      name:          :meta.variable.assignment.destructured.object.caffeine
      patterns:
        []
          {} include: :#variable_name
          {} include: :#instance_variable
          {} include: :#single_quoted_string
          {} include: :#double_quoted_string
          {} include: :#numeric

    {}
      begin:         "(?<=\\s|^)(\\[)(?=.+?\\]\\s+[:=])"
      beginCaptures: 0: name: :keyword.operator.caffeine
      end:           "(\\]\\s*[:=])"
      endCaptures:   0: name: :keyword.operator.caffeine
      name:          :meta.variable.assignment.destructured.array.caffeine
      patterns:
        []
          {} include: :#variable_name
          {} include: :#instance_variable
          {} include: :#single_quoted_string
          {} include: :#double_quoted_string
          {} include: :#numeric

    {}
      captures:
        1: name: :entity.name.function.caffeine
        4: name: :punctuation.definition.parameters.begin.caffeine
        5:
          patterns:
            []
              {}
                captures:
                  1: name: :variable.parameter.function.caffeine
                  2: name: :punctuation.separator.key-value.caffeine
                  3: name: :string.quoted.double.caffeine
                  4: name: :punctuation.definition.string.begin.caffeine
                  5: name: :punctuation.definition.string.end.caffeine
                  6: name: :string.quoted.single.caffeine
                  7: name: :punctuation.definition.string.begin.caffeine
                  8: name: :punctuation.definition.string.end.caffeine

                match:
                  """
                    (?x)
                    ([^()\\s,]+)
                    \\s+(=)\\s+
                    (?:
                      ((")[^"]*("))
                      | ((')[^']*('))
                    )

              {} match: "[^()\\s,]+", name: :variable.parameter.function.caffeine
              {} match: ",",          name: :punctuation.separator.arguments.caffeine

        6: name: :punctuation.definition.parameters.begin.caffeine
        7: name: :storage.type.function.caffeine

      match:
        """
          (?x)
          (?<=^|\\s)
          (?=@?[a-zA-Z\\$_])
          (
            @?[a-zA-Z\\$_](\\w|\\$|:|\\.)*
            \\s*
            (?=
              [:=]
              (\\s*(\\()(.*)(\\)))?
              \\s*
              ([=-]>)
            )
          )


      name: :meta.function.caffeine

    {}
      match:
        """
          (?x)
          \\b
          (?<!\\.|::)
          (true|on|yes)
          (?!\\s*[:=][^=])
          \\b

      name: :constant.language.boolean.true.caffeine

    {}
      match:
        """
          (?x)
          \\b
          (?<!\\.|::)
          (false|off|no)
          (?!\\s*[:=][^=])
          \\b

      name: :constant.language.boolean.false.caffeine

    {}
      match:
        '@?\\b(?!class|subclass|extends|decodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|require)\\w+(?=\\s+(?!(of|in|then|is|isnt|and|or|for|else|when|not|if)\\s)(?=(@?\\w+|\\->|\\-\\d|\\[|\\{|"|\'))|(?=\\())'

      name: :entity.name.function.caffeine

    {} match: "[=-]>", name: :storage.type.function.caffeine
    {}
      match:
        """
          (?x)
          \\b
          (?<!\\.|::)
          null
          (?!\\s*[:=][^=])
          \\b

      name: :constant.language.null.caffeine

    {}
      match:
        """
          (?x)
          \\b
          (?<!\\.|::)
          (extends)
          (?!\\s*[:=][^=])
          \\b

      name: :variable.language.caffeine

    {} match: "\\b(?<!\\.)this(?!\\s*[:=])\\b", name: :variable.language.this.caffeine
    {}
      captures:
        1: name: :storage.type.class.caffeine
        2: name: :keyword.control.inheritance.caffeine
        3: name: :entity.other.inherited-class.caffeine

      match:
        """
          (?x)
          (?<=\\s|^|\\[|\\()
                    (class\\b)
          (?:
            \\s+(extends)\\s+
            (@?[a-zA-Z\\$\\._][\\w\\.]*)
          )

      name: :meta.class.caffeine

    {}
      captures:
        1: name: :storage.type.class.caffeine
        2: name: :entity.name.type.class.caffeine
        3: name: :keyword.control.inheritance.caffeine
        4: name: :entity.other.inherited-class.caffeine

      match:
        """
          (?x)
          (?<=\\s|^|\\[|\\()
          (class\\b)
          \\s+
          (@?[a-zA-Z\\$_][\\w\\.]*)?
          (?:
            \\s+(extends)\\s+
            (@?[a-zA-Z\\$\\._][\\w\\.]*)
          )?

      name: :meta.class.caffeine

    {} match: "\\b(debugger|\\\\)\\b", name: :keyword.other.caffeine
    {}
      match:
        """
          (?x)
          \\b(
            Array
            | ArrayBuffer
            | Blob
            | Boolean
            | Date
            | document
            | Function
            | Int(8|16|32|64)Array
            | Math
            | Map
            | Number
            | Object
            | Proxy
            | RegExp
            | Set
            | String
            | WeakMap
            | window
            | Uint(8|16|32|64)Array
            | XMLHttpRequest
          )\\b

      name: :support.class.caffeine

    {} match: "\\b(console)\\b", name: :entity.name.type.object.caffeine
    {} match: "((?<=console\\.)(debug|warn|info|log|error|time|timeEnd|assert))\\b",name: :support.function.console.caffeine
    {}
      match:
        """
          (?x)
          \\b(
            decodeURI(Component)?
            | encodeURI(Component)?
            | eval
            | parse(Float|Int)
            | require
          )\\b

      name: :support.function.caffeine

    {}
      match:
        """
          (?x)
          (
            (?<=\\.)
            (
              apply
              | call
              | concat
              | every
              | filter
              | forEach
              | from
              | hasOwnProperty
              | indexOf
              | isPrototypeOf
              | join
              | lastIndexOf
              | map
              | of
              | pop
              | propertyIsEnumerable
              | push
              | reduce(Right)?
              | reverse
              | shift
              | slice
              | some
              | sort
              | splice
              | to(Locale)?String
              | unshift
              | valueOf
            )
          )\\b

      name: :support.function.method.array.caffeine

    {} match: "((?<=Array\\.)(isArray))\\b", name: :support.function.static.array.caffeine
    {}
      match:
        """
          (?x)
          (
            (?<=Object\\.)
            (
              create
              | definePropert(ies|y)
              | freeze
              | getOwnProperty(Descriptors?|Names)
              | getProperty(Descriptor|Names)
              | getPrototypeOf
              | is(Extensible|Frozen|Sealed)?
              | isnt
              | keys
              | preventExtensions
              | seal
            )
          )\\b

      name: :support.function.static.object.caffeine

    {}
      match:
        """
          (?x)
          (
            (?<=Math\\.)
            (
              abs
              | acos
              | acosh
              | asin
              | asinh
              | atan
              | atan2
              | atanh
              | ceil
              | cos
              | cosh
              | exp
              | expm1
              | floor
              | hypot
              | log
              | log10
              | log1p
              | log2
              | max
              | min
              | pow
              | random
              | round
              | sign
              | sin
              | sinh
              | sqrt
              | tan
              | tanh
              | trunc
            )
          )\\b

      name: :support.function.static.math.caffeine

    {}
      match:
        """
          (?x)
          (
            (?<=Number\\.)
            (
              is(Finite|Integer|NaN)
              | toInteger
            )
          )\\b

      name: :support.function.static.number.caffeine

    {} match: "\\b(Infinity|NaN|undefined)\\b", name: :constant.language.caffeine
    {}
      match: "\\;"
      name:  :punctuation.terminator.statement.caffeine

    {} match: ",", name: :meta.delimiter.object.comma.caffeine
    {}
      match: "\\."
      name:  :meta.delimiter.method.period.caffeine

    {} match:   "\\{|\\}",     name: :meta.brace.curly.caffeine
    {} match:   "\\(|\\)",     name: :meta.brace.round.caffeine
    {} match:   "\\[|\\]\\s*", name: :meta.brace.square.caffeine
    {} include: :#instance_variable
    {} include: :#single_quoted_string
    {} include: :#double_quoted_string
    {} include: :#numeric

repository:
  double_quoted_string:
    patterns:
      []
        begin:         '"'
        beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
        end:           '"'
        endCaptures:   0: name: :punctuation.definition.string.end.caffeine
        name:          :string.quoted.double.caffeine
        patterns:
          {}
            match:
              """
                (?x)
                \\\\(
                  x\\h{2}
                  | [0-2][0-7]{0,2}
                  | 3[0-6][0-7]
                  | 37[0-7]?
                  | [4-7][0-7]?
                  | .
                )

            name: :constant.character.escape.caffeine

          {} include: :#interpolated_caffeine

  embedded_comment:
    patterns:
      []
        captures: 1: name: :punctuation.definition.comment.caffeine
        match:    "(?<!\\\\)(#).*$\\n?"
        name:     :comment.line.number-sign.caffeine

  instance_variable:
    patterns:
      []
        captures: 1: name: :punctuation.definition.variable.caffeine
        match:    "(@)([a-zA-Z_\\$]\\w*)?"
        name:     :variable.other.readwrite.instance.caffeine

  interpolated_caffeine:
    patterns:
      []
        begin:         :#\{
        beginCaptures: 0: name: :punctuation.section.embedded.begin.caffeine
        contentName:   :source.caffeine
        end:           "(\\})"
        endCaptures:
          0: name: :punctuation.section.embedded.end.caffeine
          1: name: :source.caffeine

        name:     :meta.embedded.line.caffeine
        patterns: [] include: :$self

  numeric:
    patterns:
      []
        match:
          """
            (?x)
            (?<!\\$)\\b
            (
              (0([box])[0-9a-fA-F]+)
              | ([0-9]+(\\.[0-9]+)?(e[+\\-]?[0-9]+)?)
            )\\b

        name: :constant.numeric.caffeine

  single_quoted_string:
    patterns:
      []
        begin:         "'"
        beginCaptures: 0: name: :punctuation.definition.string.begin.caffeine
        end:           "'"
        endCaptures:   0: name: :punctuation.definition.string.end.caffeine
        name:          :string.quoted.single.caffeine
        patterns:
          []
            match:
              """
                (?x)
                \\\\(
                  x\\h{2}
                  | [0-2][0-7]{0,2}
                  | 3[0-6][0-7]?
                  | 37[0-7]?
                  | [4-7][0-7]?
                  | .
                )

            name: :constant.character.escape.caffeine

  variable_name: patterns: [] match: "([a-zA-Z\\$_]\\w*(\\.\\w+)*)", name: :variable.other.assignment.caffeine
